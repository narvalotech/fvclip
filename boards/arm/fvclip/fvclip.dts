/dts-v1/;
#include <nordic/nrf52840_qiaa.dtsi>
#include <dt-bindings/input/input-event-codes.h>

/ {
	model = "FV1-clip board";
	compatible = "nvl,fvclip";

	chosen {
		zephyr,sram = &sram0;
		zephyr,flash = &flash0;
		zephyr,code-partition = &slot0_partition;
		zephyr,display = &tzt_oled;
	};

	buttons {
		compatible = "gpio-keys";
		status = "okay";
		button0: button_0 {
			/* right */
			gpios = <&gpio1 9 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
			zephyr,code = <INPUT_KEY_0>;
		};
		button1: button_1 {
			/* mid */
			gpios = <&gpio0 8 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
			zephyr,code = <INPUT_KEY_1>;
		};
		button2: button_2 {
			/* left */
			gpios = <&gpio0 6 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
			zephyr,code = <INPUT_KEY_2>;
		};
	};

	encoder {
		compatible = "gpio-qdec";
		status = "okay";
		gpios = <&gpio0 4 (GPIO_PULL_UP | GPIO_ACTIVE_HIGH)>,
			<&gpio0 26 (GPIO_PULL_UP | GPIO_ACTIVE_HIGH)>;
		steps-per-period = <4>;
		zephyr,axis = <INPUT_REL_Y>;
		sample-time-us = <2000>;
		idle-timeout-ms = <200>;
	};

	outputs {
		compatible = "gpio-noinit";
		gpio_s0		{gpios = < &gpio1 2 GPIO_ACTIVE_HIGH >;};
		gpio_s1 	{gpios = < &gpio1 4 GPIO_ACTIVE_HIGH >;};
		gpio_s2 	{gpios = < &gpio1 6 GPIO_ACTIVE_HIGH >;};

		gpio_gain0 	{gpios = < &gpio1 0 GPIO_ACTIVE_HIGH >;};
		gpio_gain1 	{gpios = < &gpio0 24 GPIO_ACTIVE_HIGH >;};

		gpio_dsp_clk 	{gpios = < &gpio0 22 GPIO_ACTIVE_LOW >;};
		gpio_oled_pwr 	{gpios = < &gpio0 20 GPIO_ACTIVE_LOW >;};
		gpio_pa_pwr 	{gpios = < &gpio0 2 GPIO_ACTIVE_HIGH >;};
	};

	inputs {
		compatible = "gpio-noinit";
		gpio_chg {gpios = < &gpio0 12 (GPIO_PULL_UP | GPIO_ACTIVE_LOW) >;};
	};

	aliases {
		pwm-0 = &pwm0;
		sw0 = &button0;
		sw1 = &button1;
		sw2 = &button2;
		mcuboot-button0 = &button0;
		watchdog0 = &wdt0;
	};
};

&gpiote {
	status = "okay";
};

&gpio0 {
	status = "okay";
};

&gpio1 {
	status = "okay";
};

&pwm0 {
	status = "okay";
	pinctrl-0 = <&pwm0_default>;
	/delete-property/ pinctrl-1;
	pinctrl-names = "default";
};

&i2c0 {
	compatible = "nordic,nrf-twis";
	status = "okay";

	/* TODO: use pinctrl DT macros */
	pinctrl-0 = <&i2c1_default>;
	pinctrl-names = "default";

	eeprom:24lc32a@50 {
		label = "Emulated read-only 24LC32A";
		reg = <0x50>;
	};
};

&i2c1 {
	compatible = "nordic,nrf-twim";
	status = "okay";

	pinctrl-0 = <&i2c1_default>;
	pinctrl-names = "default";

	/* Necessary for SSD1306 driver */
	zephyr,concat-buf-size = <1024>;

	mpu6050@68 {
		compatible = "invensense,mpu6050";
		reg = <0x68>;
		status = "okay";
		int-gpios = <&gpio0 13 GPIO_ACTIVE_HIGH>;
	};

	tzt_oled: ssd1306@3c {
		compatible = "solomon,ssd1306fb";
		status = "okay";
		reg = <0x3c>;
		width = <128>;
		height = <32>;
		segment-offset = <0>;
		page-offset = <0>;
		display-offset = <0>;
		multiplex-ratio = <31>;
		/* segment-remap; */
		/* com-invdir; */
		com-sequential;
		prechargep = <0x22>;
	};
};

&flash0 {
	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		boot_partition: partition@0 {
			label = "mcuboot";
			reg = <0x00000000 0x0000C000>;
		};
		slot0_partition: partition@c000 {
			label = "image-0";
			reg = <0x0000C000 0x00076000>;
		};
		slot1_partition: partition@82000 {
			label = "image-1";
			reg = <0x00082000 0x00076000>;
		};

		/*
		 * The flash starting at 0x000f8000 and ending at
		 * 0x000fffff is reserved for use by the application.
		 */

		/*
		 * Storage partition will be used by FCB/LittleFS/NVS
		 * if enabled.
		 */
		storage_partition: partition@f8000 {
			label = "storage";
			reg = <0x000f8000 0x00008000>;
		};
	};
};

zephyr_udc0: &usbd {
	compatible = "nordic,nrf-usbd";
	status = "okay";

	cdc_acm_uart0: cdc_acm_uart0 {
		compatible = "zephyr,cdc-acm-uart";
	};
};

&pinctrl {
	i2c0_default: i2c0_default {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 0, 29)>,
				<NRF_PSEL(TWIM_SCL, 0, 31)>;
			bias-pull-up;
		};
	};

	i2c1_default: i2c1_default {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 0, 15)>,
				<NRF_PSEL(TWIM_SCL, 0, 17)>;
			bias-pull-up;
		};
	};

	pwm0_default: pwm0_default {
		group1 {
			/* POT0 and POT1 are swapped on the DSP board */
			psels = <NRF_PSEL(PWM_OUT0, 1, 15)>,
				<NRF_PSEL(PWM_OUT1, 1, 10)>,
				<NRF_PSEL(PWM_OUT2, 1, 13)>;
			/delete-property/ nordic,invert;
		};
	};
};
